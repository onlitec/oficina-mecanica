// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdOrders ServiceOrder[] @relation("CreatedBy")
  assignedOrders ServiceOrder[] @relation("AssignedTo")
  notifications Notification[]
  notificationSettings NotificationSettings?
  createdQuotes Quote[] @relation("QuoteCreatedBy")

  @@map("users")
}

model Customer {
  id        String      @id @default(cuid())
  name      String
  email     String?     @unique
  phone     String?
  phone2    String?     // Telefone secundário
  address   String?
  cpfCnpj   String?     @unique
  type      CustomerType @default(INDIVIDUAL) // PF ou PJ

  // Dados Pessoa Física
  rg        String?
  birthDate DateTime?

  // Dados Pessoa Jurídica
  companyName String?   // Razão social
  fantasyName String?   // Nome fantasia
  stateRegistration String? // Inscrição estadual
  contactPerson String? // Responsável

  // Endereço detalhado
  zipCode   String?
  street    String?
  number    String?
  complement String?
  neighborhood String?
  city      String?
  state     String?

  observations String?
  status    CustomerStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vehicles Vehicle[]
  serviceOrders ServiceOrder[]
  invoices Invoice[]
  quotes Quote[]

  @@map("customers")
}

model Vehicle {
  id           String   @id @default(cuid())
  plate        String   @unique
  brand        String
  model        String
  year         Int      // Ano de fabricação
  modelYear    Int?     // Ano do modelo
  color        String?
  chassisNumber String? @unique
  renavam      String?
  fuel         FuelType @default(FLEX)
  mileage      Int?     // Quilometragem atual
  observations String?  // Observações sobre o veículo
  status       VehicleStatus @default(ACTIVE)
  customerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer      Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  serviceOrders ServiceOrder[]
  quotes        Quote[]

  @@map("vehicles")
}

model ServiceOrder {
  id          String            @id @default(cuid())
  number      String            @unique

  // Dados da OS
  customerComplaint String?      // Reclamação do cliente
  symptoms         String?       // Sintomas observados
  diagnosis        String?       // Diagnóstico técnico
  solution         String?       // Solução aplicada
  observations     String?       // Observações gerais

  // Controle
  status           ServiceOrderStatus @default(OPEN)
  priority         ServiceOrderPriority @default(NORMAL)

  // Datas
  estimatedDate    DateTime?     // Previsão de entrega
  completedAt      DateTime?     // Data de conclusão

  // Valores
  laborValue       Decimal       @default(0) // Valor da mão de obra
  partsValue       Decimal       @default(0) // Valor das peças
  totalValue       Decimal       @default(0) // Valor total
  discount         Decimal       @default(0) // Desconto aplicado

  // Veículo no momento da OS
  vehicleMileage   Int?          // Quilometragem no momento

  // Relacionamentos
  customerId       String
  vehicleId        String
  createdById      String
  assignedToId     String?

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])
  assignedTo  User?    @relation("AssignedTo", fields: [assignedToId], references: [id])

  services    ServiceOrderService[]
  parts       ServiceOrderPart[]
  invoice     Invoice?
  quote       Quote?

  @@map("service_orders")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serviceOrders ServiceOrderService[]
  quoteItems QuoteItem[]

  @@map("services")
}

model Part {
  id          String   @id @default(cuid())
  internalCode String? @unique // Código interno
  barcode     String?  @unique // Código de barras/EAN
  name        String
  description String?
  category    ProductCategory @default(PARTS)
  subcategory String?
  brand       String?  // Marca/fabricante
  model       String?  // Modelo/referência
  unit        String   @default("UN") // Unidade de medida

  // Preços e custos
  price       Decimal  @default(0) // Preço principal (compatibilidade)
  costPrice   Decimal  @default(0) // Preço de custo
  salePrice   Decimal  @default(0) // Preço de venda
  profitMargin Decimal @default(0) // Margem de lucro %

  // Controle de estoque
  stock       Int      @default(0)
  minStock    Int      @default(0)
  maxStock    Int?
  reorderPoint Int?    // Ponto de reposição
  location    String?  // Localização no estoque

  // Fornecedores
  supplier     String? // Fornecedor principal (compatibilidade)
  mainSupplier String? // Fornecedor principal
  alternativeSuppliers String? // Fornecedores alternativos (JSON)

  // Controle
  expiryDate  DateTime? // Validade (produtos perecíveis)
  isActive    Boolean  @default(true) // Compatibilidade
  status      ProductStatus @default(ACTIVE)
  observations String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serviceOrders ServiceOrderPart[]
  quoteItems QuoteItem[]

  @@map("parts")
}

model ServiceOrderService {
  id             String  @id @default(cuid())
  serviceOrderId String
  serviceId      String
  quantity       Int     @default(1)
  unitPrice      Decimal
  totalPrice     Decimal

  // Relations
  serviceOrder ServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id])

  @@unique([serviceOrderId, serviceId])
  @@map("service_order_services")
}

model ServiceOrderPart {
  id             String  @id @default(cuid())
  serviceOrderId String
  partId         String
  quantity       Int
  unitPrice      Decimal
  totalPrice     Decimal

  // Relations
  serviceOrder ServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  part         Part         @relation(fields: [partId], references: [id])

  @@unique([serviceOrderId, partId])
  @@map("service_order_parts")
}

// Modelos Financeiros
model Invoice {
  id              String        @id @default(cuid())
  number          String        @unique
  serviceOrderId  String        @unique
  customerId      String
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  status          InvoiceStatus @default(PENDING)
  subtotal        Decimal
  discount        Decimal       @default(0)
  taxes           Decimal       @default(0)
  total           Decimal
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  serviceOrder    ServiceOrder  @relation(fields: [serviceOrderId], references: [id])
  customer        Customer      @relation(fields: [customerId], references: [id])
  payments        Payment[]

  @@map("invoices")
}

model Payment {
  id              String        @id @default(cuid())
  invoiceId       String
  amount          Decimal
  method          PaymentMethod
  reference       String?
  notes           String?
  paidAt          DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  invoice         Invoice       @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model Transaction {
  id              String            @id @default(cuid())
  type            TransactionType
  category        String
  description     String
  amount          Decimal
  date            DateTime          @default(now())
  reference       String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("transactions")
}

model FinancialSummary {
  id              String    @id @default(cuid())
  date            DateTime  @unique
  totalRevenue    Decimal   @default(0)
  totalExpenses   Decimal   @default(0)
  netIncome       Decimal   @default(0)
  pendingInvoices Decimal   @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("financial_summary")
}

enum UserRole {
  ADMIN
  MANAGER
  MECHANIC
  USER
}

enum CustomerType {
  INDIVIDUAL  // Pessoa Física
  COMPANY     // Pessoa Jurídica
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum FuelType {
  GASOLINE
  ETHANOL
  DIESEL
  FLEX
  ELECTRIC
  HYBRID
  CNG        // Gás Natural
}

enum VehicleStatus {
  ACTIVE
  SOLD
  SCRAPPED
  INACTIVE
}

enum ServiceOrderStatus {
  OPEN              // Aberta/Aguardando
  DIAGNOSING        // Em diagnóstico
  WAITING_APPROVAL  // Aguardando aprovação
  APPROVED          // Aprovada
  WAITING_PARTS     // Aguardando peças
  IN_PROGRESS       // Em execução
  WAITING_PAYMENT   // Aguardando pagamento
  COMPLETED         // Concluída
  CANCELLED         // Cancelada
}

enum ServiceOrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ProductCategory {
  PARTS           // Peças
  SUPPLIES        // Insumos
  ACCESSORIES     // Acessórios
  TOOLS          // Ferramentas
  CONSUMABLES    // Materiais de consumo
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  SEASONAL
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
  CHECK
}

enum TransactionType {
  INCOME
  EXPENSE
}

// Modelos de Notificações
model Notification {
  id              String            @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  priority        NotificationPriority @default(MEDIUM)
  isRead          Boolean           @default(false)
  userId          String?
  relatedId       String?           // ID do objeto relacionado (fatura, peça, etc)
  relatedType     String?           // Tipo do objeto (invoice, part, etc)
  data            String?           // JSON com dados extras
  createdAt       DateTime          @default(now())
  readAt          DateTime?

  user            User?             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AlertRule {
  id              String            @id @default(cuid())
  name            String
  type            AlertType
  isActive        Boolean           @default(true)
  conditions      String            // JSON com condições
  actions         String            // JSON com ações
  lastTriggered   DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("alert_rules")
}

model NotificationSettings {
  id              String            @id @default(cuid())
  userId          String            @unique
  emailEnabled    Boolean           @default(true)
  pushEnabled     Boolean           @default(true)
  smsEnabled      Boolean           @default(false)
  alertTypes      String            // JSON array com tipos habilitados
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user            User              @relation(fields: [userId], references: [id])

  @@map("notification_settings")
}

enum NotificationType {
  INVOICE_DUE
  INVOICE_OVERDUE
  PAYMENT_RECEIVED
  LOW_STOCK
  OUT_OF_STOCK
  FINANCIAL_GOAL
  SYSTEM_ALERT
  REMINDER
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AlertType {
  INVOICE_DUE_SOON
  INVOICE_OVERDUE
  PAYMENT_RECEIVED
  LOW_STOCK_ALERT
  OUT_OF_STOCK_ALERT
  FINANCIAL_TARGET
  REVENUE_GOAL
  EXPENSE_LIMIT
}

// Modelos de Orçamentos
model Quote {
  id       String @id @default(cuid())
  number   String @unique

  // Relacionamentos
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  vehicleId  String?
  vehicle    Vehicle? @relation(fields: [vehicleId], references: [id])

  // Dados do orçamento
  title           String
  description     String?
  customerRequest String? // Solicitação do cliente

  // Status e datas
  status     QuoteStatus @default(DRAFT)
  validUntil DateTime

  // Valores
  subtotal Float @default(0)
  discount Float @default(0)
  taxes    Float @default(0)
  total    Float @default(0)

  // Observações
  notes          String?
  terms          String? // Termos e condições
  paymentTerms   String? // Condições de pagamento
  deliveryTerms  String? // Prazo de entrega

  // Relacionamentos
  items QuoteItem[]

  // Conversão para OS
  serviceOrderId String?      @unique
  serviceOrder   ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  // Auditoria
  createdBy String
  creator   User   @relation("QuoteCreatedBy", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotes")
}

model QuoteItem {
  id      String @id @default(cuid())
  quoteId String
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  // Tipo do item
  type        QuoteItemType

  // Para peças
  partId      String?
  part        Part?   @relation(fields: [partId], references: [id])

  // Para serviços
  serviceId   String?
  service     Service? @relation(fields: [serviceId], references: [id])

  // Dados do item
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  // Observações
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quote_items")
}

enum QuoteStatus {
  DRAFT      // Rascunho
  SENT       // Enviado
  VIEWED     // Visualizado pelo cliente
  APPROVED   // Aprovado
  REJECTED   // Rejeitado
  EXPIRED    // Expirado
  CONVERTED  // Convertido em OS
}

enum QuoteItemType {
  PART     // Peça
  SERVICE  // Serviço
  LABOR    // Mão de obra
  OTHER    // Outros
}

model SystemSettings {
  id              String   @id @default(cuid())
  appName         String   @default("Oficina Mecânica")
  appDescription  String?  @default("Sistema de Gestão Automotiva")
  logoUrl         String?
  primaryColor    String   @default("#667eea")
  secondaryColor  String   @default("#764ba2")
  companyName     String   @default("Minha Oficina")
  companyAddress  String?
  companyPhone    String?
  companyEmail    String?
  companyCnpj     String?
  timezone        String   @default("America/Sao_Paulo")
  currency        String   @default("BRL")
  language        String   @default("pt-BR")
  themeUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("system_settings")
}
