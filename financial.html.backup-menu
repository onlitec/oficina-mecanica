<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gest√£o Financeira - Sistema de Gest√£o de Oficina Mec√¢nica</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }
        
        /* Header styles removed - now handled by global-menu.js */
        
        
        
        
        
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .page-header {
            margin-bottom: 30px;
        }
        
        .page-title {
            font-size: 2em;
            color: #333;
            margin-bottom: 10px;
        }
        
        .page-subtitle {
            color: #666;
            font-size: 1.1em;
        }
        
        .filters {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .filters-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        
        .form-group input,
        .form-group select {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            display: inline-block;
            transition: background 0.3s ease;
        }
        
        .btn:hover {
            background: #5a6fd8;
        }
        
        .btn-success {
            background: #28a745;
        }
        
        .btn-success:hover {
            background: #1e7e34;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
        }
        
        .metric-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
        }
        
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .metric-label {
            color: #666;
            font-size: 1em;
        }
        
        .metric-value.revenue {
            color: #28a745;
        }
        
        .metric-value.pending {
            color: #ffc107;
        }
        
        .metric-value.overdue {
            color: #dc3545;
        }
        
        .chart-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .chart-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
        }
        
        .invoices-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .invoices-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .section-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }
        
        .invoice-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: background 0.3s ease;
        }
        
        .invoice-item:hover {
            background: #f8f9fa;
        }
        
        .invoice-info {
            flex: 1;
        }
        
        .invoice-number {
            font-weight: bold;
            color: #333;
        }
        
        .invoice-customer {
            color: #666;
            font-size: 0.9em;
            margin-top: 2px;
        }
        
        .invoice-value {
            font-weight: bold;
            color: #28a745;
        }
        
        .invoice-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
        }
        
        .status-paid {
            background: #d4edda;
            color: #155724;
        }
        
        .status-overdue {
            background: #f8d7da;
            color: #721c24;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        
        .period-info {
            background: #d1ecf1;
            color: #0c5460;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .quick-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .invoices-section {
                grid-template-columns: 1fr;
            }
            
            .filters-row {
                grid-template-columns: 1fr;
            }
            
            .quick-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Global menu will be inserted here by global-menu.js -->
            <div class="nav-links">
                <a href="/dashboard.html">Dashboard</a>
                <a href="/customers.html">Clientes</a>
                <a href="/service-orders.html">Ordens de Servi√ßo</a>
                <a href="/parts.html">Pe√ßas</a>
                <a href="/reports.html">Relat√≥rios</a>
                <a href="/financial.html">Financeiro</a>
                <span id="userName">Carregando...</span>
                <button class="btn btn-secondary" onclick="logout()">Sair</button>
            </div>
        </div>
    </div>
    
    <div class="container">
        <div class="page-header">
            <h1 class="page-title">üí∞ Gest√£o Financeira</h1>
            <p class="page-subtitle">Controle de faturamento, pagamentos e fluxo de caixa</p>
        </div>
        
        <!-- Filtros -->
        <div class="filters">
            <div class="filters-row">
                <div class="form-group">
                    <label for="startDate">Data Inicial:</label>
                    <input type="date" id="startDate">
                </div>
                
                <div class="form-group">
                    <label for="endDate">Data Final:</label>
                    <input type="date" id="endDate">
                </div>
                
                <div class="form-group">
                    <label>&nbsp;</label>
                    <button class="btn" onclick="loadDashboard()">üîç Atualizar</button>
                </div>
            </div>
        </div>
        
        <!-- A√ß√µes R√°pidas -->
        <div class="quick-actions">
            <a href="/invoices.html" class="btn">üìÑ Ver Todas as Faturas</a>
            <a href="/service-orders.html" class="btn btn-success">‚ûï Nova Ordem de Servi√ßo</a>
        </div>
        
        <div id="loading" class="loading">Carregando dashboard financeiro...</div>
        <div id="error" class="error" style="display: none;"></div>
        
        <div id="content" style="display: none;">
            <!-- Informa√ß√µes do Per√≠odo -->
            <div class="period-info" id="periodInfo"></div>
            
            <!-- Dashboard de M√©tricas -->
            <div class="dashboard-grid">
                <div class="metric-card">
                    <div class="metric-icon">üìä</div>
                    <div class="metric-value" id="totalInvoices">0</div>
                    <div class="metric-label">Total de Faturas</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">üí∞</div>
                    <div class="metric-value revenue" id="totalRevenue">R$ 0,00</div>
                    <div class="metric-label">Receita Total</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">‚è≥</div>
                    <div class="metric-value pending" id="totalPending">R$ 0,00</div>
                    <div class="metric-label">Valores Pendentes</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-icon">üìà</div>
                    <div class="metric-value" id="averageInvoice">R$ 0,00</div>
                    <div class="metric-label">Valor M√©dio por Fatura</div>
                </div>
            </div>
            
            <!-- Gr√°fico de Receita -->
            <div class="chart-card">
                <h3 class="chart-title">üìà Receita Di√°ria</h3>
                <div class="chart-container">
                    <canvas id="revenueChart"></canvas>
                </div>
            </div>
            
            <!-- Faturas Recentes -->
            <div class="invoices-section">
                <div class="invoices-card">
                    <h3 class="section-title">üìÑ Faturas Recentes</h3>
                    <div id="recentInvoices">
                        <div class="loading">Carregando faturas...</div>
                    </div>
                </div>
                
                <div class="invoices-card">
                    <h3 class="section-title">‚ö†Ô∏è Faturas Pendentes</h3>
                    <div id="pendingInvoices">
                        <div class="loading">Carregando faturas pendentes...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let revenueChart = null;
        
        // Verificar autentica√ß√£o
        function checkAuth() {
            const user = localStorage.getItem('user');
            if (!user) {
                window.location.href = '/login.html';
                return null;
            }
            return JSON.parse(user);
        }
        
        // Logout
        function logout() {
            localStorage.removeItem('user');
            window.location.href = '/login.html';
        }
        
        // Carregar dados do usu√°rio
        function loadUserInfo() {
            const user = checkAuth();
            if (user) {
                document.getElementById('userName').textContent = `${user.name} (${user.role})`;
            }
        }
        
        // Definir datas padr√£o (m√™s atual)
        function setDefaultDates() {
            const endDate = new Date();
            const startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1);
            
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
        }
        
        // Carregar dashboard
        async function loadDashboard() {
            try {
                showLoading();
                
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                const params = new URLSearchParams();
                if (startDate) params.append('startDate', startDate);
                if (endDate) params.append('endDate', endDate);
                
                const response = await fetch(`/api/financial/dashboard?${params}`);
                const data = await response.json();
                
                if (data.success) {
                    displayDashboard(data.data);
                    showContent();
                } else {
                    showError(data.error || 'Erro ao carregar dashboard');
                }
            } catch (error) {
                showError('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Exibir dashboard
        function displayDashboard(data) {
            const { period, summary, dailyRevenue, recentInvoices } = data;
            
            // Informa√ß√µes do per√≠odo
            const startDate = new Date(period.startDate).toLocaleDateString('pt-BR');
            const endDate = new Date(period.endDate).toLocaleDateString('pt-BR');
            document.getElementById('periodInfo').textContent = 
                `üìÖ Per√≠odo: ${startDate} at√© ${endDate}`;
            
            // M√©tricas
            document.getElementById('totalInvoices').textContent = summary.totalInvoices || 0;
            document.getElementById('totalRevenue').textContent = formatCurrency(summary.totalRevenue);
            document.getElementById('totalPending').textContent = formatCurrency(summary.totalPending);
            document.getElementById('averageInvoice').textContent = formatCurrency(summary.averageInvoiceValue);
            
            // Gr√°fico de receita
            createRevenueChart(dailyRevenue);
            
            // Faturas recentes
            displayRecentInvoices(recentInvoices);
        }
        
        // Criar gr√°fico de receita
        function createRevenueChart(dailyRevenue) {
            const ctx = document.getElementById('revenueChart').getContext('2d');
            
            if (revenueChart) {
                revenueChart.destroy();
            }
            
            const labels = dailyRevenue.map(item => item.date);
            const amounts = dailyRevenue.map(item => item.amount);
            
            revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Receita (R$)',
                        data: amounts,
                        borderColor: '#28a745',
                        backgroundColor: '#28a74520',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#28a745',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Receita: ${formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Data'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Receita (R$)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Exibir faturas recentes
        function displayRecentInvoices(invoices) {
            const recentContainer = document.getElementById('recentInvoices');
            const pendingContainer = document.getElementById('pendingInvoices');
            
            if (invoices.length === 0) {
                recentContainer.innerHTML = '<p style="text-align: center; color: #666;">Nenhuma fatura encontrada no per√≠odo</p>';
                pendingContainer.innerHTML = '<p style="text-align: center; color: #666;">Nenhuma fatura pendente</p>';
                return;
            }
            
            // Faturas recentes (todas)
            recentContainer.innerHTML = invoices.slice(0, 5).map(invoice => `
                <div class="invoice-item">
                    <div class="invoice-info">
                        <div class="invoice-number">#${invoice.number}</div>
                        <div class="invoice-customer">${invoice.customer.name}</div>
                    </div>
                    <div>
                        <div class="invoice-value">${formatCurrency(invoice.total)}</div>
                        <span class="invoice-status status-${invoice.status.toLowerCase()}">${getStatusLabel(invoice.status)}</span>
                    </div>
                </div>
            `).join('');
            
            // Faturas pendentes
            const pending = invoices.filter(invoice => invoice.status === 'PENDING' || invoice.status === 'OVERDUE');
            pendingContainer.innerHTML = pending.slice(0, 5).map(invoice => `
                <div class="invoice-item">
                    <div class="invoice-info">
                        <div class="invoice-number">#${invoice.number}</div>
                        <div class="invoice-customer">${invoice.customer.name}</div>
                    </div>
                    <div>
                        <div class="invoice-value">${formatCurrency(invoice.total)}</div>
                        <span class="invoice-status status-${invoice.status.toLowerCase()}">${getStatusLabel(invoice.status)}</span>
                    </div>
                </div>
            `).join('');
            
            if (pending.length === 0) {
                pendingContainer.innerHTML = '<p style="text-align: center; color: #666;">Nenhuma fatura pendente</p>';
            }
        }
        
        // Obter label do status
        function getStatusLabel(status) {
            const labels = {
                'PENDING': 'Pendente',
                'PAID': 'Pago',
                'OVERDUE': 'Vencido',
                'CANCELLED': 'Cancelado'
            };
            return labels[status] || status;
        }
        
        // Formatar moeda
        function formatCurrency(value) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(value || 0);
        }
        
        // Estados da interface
        function showLoading() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('error').style.display = 'none';
            document.getElementById('content').style.display = 'none';
        }
        
        function showError(message) {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').style.display = 'block';
            document.getElementById('error').textContent = message;
            document.getElementById('content').style.display = 'none';
        }
        
        function showContent() {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('error').style.display = 'none';
            document.getElementById('content').style.display = 'block';
        }
        
        // Inicializar
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            loadUserInfo();
            setDefaultDates();
            loadDashboard();
        });
    </script>
    <script src="/js/global-menu.js"></script>
</body>
</html>
