<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifica√ß√µes - Sistema de Gest√£o de Oficina Mec√¢nica</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }
        
        /* Header styles removed - now handled by global-menu.js */
        
        
        
        
        
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .page-title {
            font-size: 2em;
            color: #333;
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            display: inline-block;
            transition: background 0.3s ease;
        }
        
        .btn:hover {
            background: #5a6fd8;
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .btn-secondary:hover {
            background: #545b62;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .metric-icon {
            font-size: 2.5em;
            margin-bottom: 15px;
        }
        
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .metric-label {
            color: #666;
            font-size: 1em;
        }
        
        .notifications-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .section-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #333;
        }
        
        .notification-item {
            display: flex;
            align-items: flex-start;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 8px;
            margin-bottom: 10px;
            transition: background 0.3s ease;
        }
        
        .notification-item:hover {
            background: #f8f9fa;
        }
        
        .notification-item.unread {
            border-left: 4px solid #667eea;
            background: #f8f9ff;
        }
        
        .notification-icon {
            font-size: 1.5em;
            margin-right: 15px;
            margin-top: 5px;
        }
        
        .notification-content {
            flex: 1;
        }
        
        .notification-title {
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        
        .notification-message {
            color: #666;
            line-height: 1.4;
            margin-bottom: 8px;
        }
        
        .notification-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9em;
            color: #999;
        }
        
        .notification-time {
            color: #999;
        }
        
        .notification-priority {
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.8em;
            font-weight: bold;
        }
        
        .priority-urgent {
            background: #f8d7da;
            color: #721c24;
        }
        
        .priority-high {
            background: #fff3cd;
            color: #856404;
        }
        
        .priority-medium {
            background: #d1ecf1;
            color: #0c5460;
        }
        
        .priority-low {
            background: #d4edda;
            color: #155724;
        }
        
        .notification-actions {
            display: flex;
            gap: 5px;
            margin-left: 10px;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.8em;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .actions-bar {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .page-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .section-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .notification-meta {
                flex-direction: column;
                gap: 5px;
                align-items: flex-start;
            }
            
            .actions-bar {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Global menu will be inserted here by global-menu.js -->
            <div class="nav-links">
                <a href="/dashboard.html">Dashboard</a>
                <a href="/customers.html">Clientes</a>
                <a href="/service-orders.html">Ordens de Servi√ßo</a>
                <a href="/parts.html">Pe√ßas</a>
                <a href="/reports.html">Relat√≥rios</a>
                <a href="/financial.html">Financeiro</a>
                <a href="/notifications.html">Notifica√ß√µes</a>
                <span id="userName">Carregando...</span>
                <button class="btn btn-secondary" onclick="logout()">Sair</button>
            </div>
        </div>
    </div>
    
    <div class="container">
        <div class="page-header">
            <h1 class="page-title">üîî Notifica√ß√µes</h1>
            <div>
                <a href="/dashboard.html" class="btn btn-secondary">‚Üê Voltar</a>
            </div>
        </div>
        
        <!-- Dashboard de Notifica√ß√µes -->
        <div id="dashboardSection">
            <div id="dashboardLoading" class="loading">Carregando m√©tricas...</div>
            <div id="dashboardError" class="error" style="display: none;"></div>
            
            <div id="dashboardContent" style="display: none;">
                <div class="dashboard-grid">
                    <div class="metric-card">
                        <div class="metric-icon">üìä</div>
                        <div class="metric-value" id="totalNotifications">0</div>
                        <div class="metric-label">Total de Notifica√ß√µes</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon">üîî</div>
                        <div class="metric-value" id="unreadNotifications">0</div>
                        <div class="metric-label">N√£o Lidas</div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-icon">üö®</div>
                        <div class="metric-value" id="urgentNotifications">0</div>
                        <div class="metric-label">Urgentes</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- A√ß√µes -->
        <div class="actions-bar">
            <button class="btn" onclick="checkInvoices()">üîç Verificar Faturas</button>
            <button class="btn" onclick="checkStock()">üì¶ Verificar Estoque</button>
            <button class="btn btn-secondary" onclick="markAllAsRead()">‚úÖ Marcar Todas como Lidas</button>
        </div>
        
        <!-- Lista de Notifica√ß√µes -->
        <div class="notifications-section">
            <div class="section-header">
                <h3 class="section-title">üìã Suas Notifica√ß√µes</h3>
                <button class="btn" onclick="loadNotifications()">üîÑ Atualizar</button>
            </div>
            
            <div id="notificationsLoading" class="loading">Carregando notifica√ß√µes...</div>
            <div id="notificationsError" class="error" style="display: none;"></div>
            
            <div id="notificationsList" style="display: none;">
            </div>
            
            <div id="emptyState" class="empty-state" style="display: none;">
                <h3>üîî Nenhuma notifica√ß√£o</h3>
                <p>Voc√™ n√£o possui notifica√ß√µes no momento.</p>
            </div>
        </div>
    </div>
    
    <script>
        let currentUserId = null;
        
        // Verificar autentica√ß√£o
        function checkAuth() {
            const user = localStorage.getItem('user');
            if (!user) {
                window.location.href = '/login.html';
                return null;
            }
            return JSON.parse(user);
        }
        
        // Logout
        function logout() {
            localStorage.removeItem('user');
            window.location.href = '/login.html';
        }
        
        // Carregar dados do usu√°rio
        function loadUserInfo() {
            const user = checkAuth();
            if (user) {
                currentUserId = user.id;
                document.getElementById('userName').textContent = `${user.name} (${user.role})`;
            }
        }
        
        // Carregar dashboard de notifica√ß√µes
        async function loadDashboard() {
            try {
                showDashboardLoading();
                
                const response = await fetch(`/api/notifications/user/${currentUserId}/dashboard`);
                const data = await response.json();
                
                if (data.success) {
                    displayDashboard(data.data);
                    showDashboardContent();
                } else {
                    showDashboardError(data.error || 'Erro ao carregar dashboard');
                }
            } catch (error) {
                showDashboardError('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Exibir dashboard
        function displayDashboard(data) {
            const { summary } = data;
            
            document.getElementById('totalNotifications').textContent = summary.total || 0;
            document.getElementById('unreadNotifications').textContent = summary.unread || 0;
            document.getElementById('urgentNotifications').textContent = summary.urgent || 0;
        }
        
        // Carregar notifica√ß√µes
        async function loadNotifications() {
            try {
                showNotificationsLoading();
                
                const response = await fetch(`/api/notifications/user/${currentUserId}?limit=20`);
                const data = await response.json();
                
                if (data.success) {
                    displayNotifications(data.data);
                    showNotificationsList();
                } else {
                    showNotificationsError(data.error || 'Erro ao carregar notifica√ß√µes');
                }
            } catch (error) {
                showNotificationsError('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Exibir notifica√ß√µes
        function displayNotifications(notifications) {
            const container = document.getElementById('notificationsList');
            
            if (notifications.length === 0) {
                showEmptyState();
                return;
            }
            
            container.innerHTML = notifications.map(notification => `
                <div class="notification-item ${!notification.isRead ? 'unread' : ''}">
                    <div class="notification-icon">${getNotificationIcon(notification.type)}</div>
                    <div class="notification-content">
                        <div class="notification-title">${notification.title}</div>
                        <div class="notification-message">${notification.message}</div>
                        <div class="notification-meta">
                            <span class="notification-time">${formatDate(notification.createdAt)}</span>
                            <span class="notification-priority priority-${notification.priority.toLowerCase()}">${getPriorityLabel(notification.priority)}</span>
                        </div>
                    </div>
                    <div class="notification-actions">
                        ${!notification.isRead ? `<button class="btn btn-sm" onclick="markAsRead('${notification.id}')">‚úÖ Marcar como Lida</button>` : ''}
                    </div>
                </div>
            `).join('');
        }
        
        // Marcar como lida
        async function markAsRead(notificationId) {
            try {
                const response = await fetch(`/api/notifications/${notificationId}/read`, {
                    method: 'PUT'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    loadNotifications();
                    loadDashboard();
                } else {
                    alert('Erro ao marcar como lida: ' + data.error);
                }
            } catch (error) {
                alert('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Marcar todas como lidas
        async function markAllAsRead() {
            try {
                const response = await fetch(`/api/notifications/user/${currentUserId}/read-all`, {
                    method: 'PUT'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    loadNotifications();
                    loadDashboard();
                    alert('Todas as notifica√ß√µes foram marcadas como lidas!');
                } else {
                    alert('Erro: ' + data.error);
                }
            } catch (error) {
                alert('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Verificar faturas
        async function checkInvoices() {
            try {
                const response = await fetch('/api/notifications/check/invoices', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(`Verifica√ß√£o conclu√≠da! ${data.data.notificationsCreated} notifica√ß√µes criadas.`);
                    loadNotifications();
                    loadDashboard();
                } else {
                    alert('Erro: ' + data.error);
                }
            } catch (error) {
                alert('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Verificar estoque
        async function checkStock() {
            try {
                const response = await fetch('/api/notifications/check/stock', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(`Verifica√ß√£o conclu√≠da! ${data.data.notificationsCreated} notifica√ß√µes criadas.`);
                    loadNotifications();
                    loadDashboard();
                } else {
                    alert('Erro: ' + data.error);
                }
            } catch (error) {
                alert('Erro de conex√£o: ' + error.message);
            }
        }
        
        // Fun√ß√µes auxiliares
        function getNotificationIcon(type) {
            const icons = {
                'INVOICE_DUE': 'üìÖ',
                'INVOICE_OVERDUE': 'üö®',
                'PAYMENT_RECEIVED': 'üí∞',
                'LOW_STOCK': 'üì¶',
                'OUT_OF_STOCK': '‚ùå',
                'FINANCIAL_GOAL': 'üéØ',
                'SYSTEM_ALERT': '‚ö†Ô∏è',
                'REMINDER': 'üîî'
            };
            return icons[type] || 'üì¢';
        }
        
        function getPriorityLabel(priority) {
            const labels = {
                'URGENT': 'Urgente',
                'HIGH': 'Alta',
                'MEDIUM': 'M√©dia',
                'LOW': 'Baixa'
            };
            return labels[priority] || priority;
        }
        
        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now.getTime() - date.getTime();
            const diffMins = Math.floor(diffMs / (1000 * 60));
            const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
            
            if (diffMins < 1) return 'Agora mesmo';
            if (diffMins < 60) return `${diffMins} min atr√°s`;
            if (diffHours < 24) return `${diffHours}h atr√°s`;
            if (diffDays < 7) return `${diffDays} dias atr√°s`;
            
            return date.toLocaleDateString('pt-BR');
        }
        
        // Estados da interface
        function showDashboardLoading() {
            document.getElementById('dashboardLoading').style.display = 'block';
            document.getElementById('dashboardError').style.display = 'none';
            document.getElementById('dashboardContent').style.display = 'none';
        }
        
        function showDashboardError(message) {
            document.getElementById('dashboardLoading').style.display = 'none';
            document.getElementById('dashboardError').style.display = 'block';
            document.getElementById('dashboardError').textContent = message;
            document.getElementById('dashboardContent').style.display = 'none';
        }
        
        function showDashboardContent() {
            document.getElementById('dashboardLoading').style.display = 'none';
            document.getElementById('dashboardError').style.display = 'none';
            document.getElementById('dashboardContent').style.display = 'block';
        }
        
        function showNotificationsLoading() {
            document.getElementById('notificationsLoading').style.display = 'block';
            document.getElementById('notificationsError').style.display = 'none';
            document.getElementById('notificationsList').style.display = 'none';
            document.getElementById('emptyState').style.display = 'none';
        }
        
        function showNotificationsError(message) {
            document.getElementById('notificationsLoading').style.display = 'none';
            document.getElementById('notificationsError').style.display = 'block';
            document.getElementById('notificationsError').textContent = message;
            document.getElementById('notificationsList').style.display = 'none';
            document.getElementById('emptyState').style.display = 'none';
        }
        
        function showNotificationsList() {
            document.getElementById('notificationsLoading').style.display = 'none';
            document.getElementById('notificationsError').style.display = 'none';
            document.getElementById('notificationsList').style.display = 'block';
            document.getElementById('emptyState').style.display = 'none';
        }
        
        function showEmptyState() {
            document.getElementById('notificationsLoading').style.display = 'none';
            document.getElementById('notificationsError').style.display = 'none';
            document.getElementById('notificationsList').style.display = 'none';
            document.getElementById('emptyState').style.display = 'block';
        }
        
        // Inicializar
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            loadUserInfo();
            loadDashboard();
            loadNotifications();
        });
    </script>
    <script src="/js/global-menu.js"></script>
</body>
</html>
