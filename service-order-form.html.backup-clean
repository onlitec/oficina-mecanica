<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <link rel="stylesheet" href="/simple-menu-fix.css">
    <link rel="stylesheet" href="/menu-center-fix.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ordem de Serviço - Sistema de Gestão de Oficina Mecânica</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            min-height: 100vh;
        }
        
        /* Header styles removed - now handled by global-menu.js */
    <script src="/simple-menu-fix.js"></script>
    <script src="/force-menu-size.js"></script>
    <script src="/debug-menu-styles.js"></script>
        
        
        
        
        
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .page-title {
            font-size: 2em;
            color: #333;
        }
        
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            display: inline-block;
            transition: background 0.3s ease;
        }
        
        .btn:hover {
            background: #5a6fd8;
        }
        
        .btn-success {
            background: #28a745;
        }
        
        .btn-success:hover {
            background: #1e7e34;
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .btn-secondary:hover {
            background: #545b62;
        }
        
        .form-container {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .form-section {
            margin-bottom: 30px;
        }
        
        .section-title {
            font-size: 1.3em;
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #eee;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group label {
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        
        .form-group label.required::after {
            content: " *";
            color: #dc3545;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }
        
        .form-group .error {
            color: #dc3545;
            font-size: 0.9em;
            margin-top: 5px;
        }
        
        .form-group .success {
            color: #28a745;
            font-size: 0.9em;
            margin-top: 5px;
        }
        
        .customer-vehicle-info {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-top: 10px;
        }
        
        .info-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 10px;
        }
        
        .info-item {
            display: flex;
            flex-direction: column;
        }
        
        .info-label {
            font-weight: bold;
            color: #666;
            font-size: 0.9em;
        }
        
        .info-value {
            color: #333;
            margin-top: 2px;
        }
        
        .priority-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 5px;
        }
        
        .priority-option {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .priority-option input[type="radio"] {
            margin: 0;
        }
        
        .priority-option label {
            margin: 0;
            font-weight: normal;
            cursor: pointer;
        }
        
        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
            margin-left: 10px;
        }
        
        .badge-open { background: #e3f2fd; color: #1976d2; }
        .badge-diagnosing { background: #fff3e0; color: #f57c00; }
        .badge-waiting-approval { background: #fce4ec; color: #c2185b; }
        .badge-approved { background: #e8f5e8; color: #2e7d32; }
        .badge-waiting-parts { background: #fff8e1; color: #f9a825; }
        .badge-in-progress { background: #e1f5fe; color: #0277bd; }
        .badge-waiting-payment { background: #fce4ec; color: #ad1457; }
        .badge-completed { background: #e8f5e8; color: #1b5e20; }
        .badge-cancelled { background: #ffebee; color: #c62828; }
        
        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .parts-section {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            background: #f8f9fa;
        }

        .parts-header {
            margin-bottom: 20px;
        }

        .parts-list {
            margin-bottom: 20px;
        }

        .part-item {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr auto;
            gap: 15px;
            align-items: center;
        }

        .part-select {
            position: relative;
        }

        .part-search {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1em;
        }

        .part-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 4px 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }

        .part-suggestion {
            padding: 10px 12px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

        .part-suggestion:hover {
            background: #f8f9fa;
        }

        .part-suggestion:last-child {
            border-bottom: none;
        }

        .suggestion-name {
            font-weight: bold;
            color: #333;
        }

        .suggestion-details {
            font-size: 0.9em;
            color: #666;
            margin-top: 2px;
        }

        .part-quantity,
        .part-price,
        .part-total {
            text-align: center;
        }

        .part-quantity input,
        .part-price input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
        }

        .part-total-value {
            font-weight: bold;
            color: #28a745;
            font-size: 1.1em;
        }

        .remove-part {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 0.9em;
        }

        .remove-part:hover {
            background: #c82333;
        }

        .parts-total {
            border-top: 2px solid #ddd;
            padding-top: 15px;
            text-align: right;
        }

        .total-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.2em;
        }

        .total-label {
            font-weight: bold;
            color: #333;
        }

        .total-value {
            font-weight: bold;
            color: #28a745;
            font-size: 1.3em;
        }

        .stock-warning {
            color: #dc3545;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .hidden {
            display: none !important;
        }
        
        .order-number {
            font-size: 1.2em;
            font-weight: bold;
            color: #667eea;
            margin-left: 10px;
        }
        
        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .info-row {
                grid-template-columns: 1fr;
            }
            
            .priority-options {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .container {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <!-- Global menu will be inserted here by global-menu.js -->
    <script src="/simple-menu-fix.js"></script>
    <script src="/force-menu-size.js"></script>
    <script src="/debug-menu-styles.js"></script>
        </div>
    </div>
    
    <div class="container">
        <div class="page-header">
            <h1 class="page-title" id="pageTitle">🔧 Nova Ordem de Serviço</h1>
            <a href="/service-orders.html" class="btn btn-secondary">← Voltar</a>
        </div>
        
        <div class="form-container">
            <div id="alert" class="alert hidden"></div>
            
            <form id="serviceOrderForm">
                <!-- Seleção de Cliente e Veículo -->
                <div class="form-section">
                    <h3 class="section-title">
                        👥 Cliente e Veículo
                        <span id="orderNumber" class="order-number hidden"></span>
                    </h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="customerId" class="required">Cliente</label>
                            <select id="customerId" name="customerId" required>
                                <option value="">Selecione um cliente...</option>
                            </select>
                            <div class="error" id="customerIdError"></div>
                        </div>
                        
                        <div class="form-group">
                            <label for="vehicleId" class="required">Veículo</label>
                            <select id="vehicleId" name="vehicleId" required disabled>
                                <option value="">Selecione primeiro um cliente...</option>
                            </select>
                            <div class="error" id="vehicleIdError"></div>
                        </div>
                    </div>
                    
                    <div id="customerVehicleInfo" class="customer-vehicle-info hidden">
                        <!-- Informações do cliente e veículo serão exibidas aqui -->
                    </div>
                </div>
                
                <!-- Dados da Ordem de Serviço -->
                <div class="form-section">
                    <h3 class="section-title">📋 Dados da Ordem de Serviço</h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="customerComplaint">Reclamação do Cliente</label>
                            <textarea id="customerComplaint" name="customerComplaint" placeholder="Descreva o problema relatado pelo cliente..."></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="symptoms">Sintomas Observados</label>
                            <textarea id="symptoms" name="symptoms" placeholder="Descreva os sintomas observados..."></textarea>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="diagnosis">Diagnóstico Técnico</label>
                            <textarea id="diagnosis" name="diagnosis" placeholder="Diagnóstico técnico do problema..."></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="solution">Solução Aplicada</label>
                            <textarea id="solution" name="solution" placeholder="Descreva a solução aplicada..."></textarea>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="observations">Observações Gerais</label>
                        <textarea id="observations" name="observations" placeholder="Observações adicionais sobre a ordem de serviço..."></textarea>
                    </div>
                </div>

                <!-- Peças -->
                <div class="form-section">
                    <h3 class="section-title">📦 Peças Utilizadas</h3>

                    <div class="parts-section">
                        <div class="parts-header">
                            <button type="button" class="btn btn-success" onclick="addPart()">+ Adicionar Peça</button>
                        </div>

                        <div id="partsList" class="parts-list">
                            <!-- Peças serão adicionadas aqui dinamicamente -->
                        </div>

                        <div class="parts-total">
                            <div class="total-row">
                                <span class="total-label">Total em Peças:</span>
                                <span class="total-value" id="partsTotal">R$ 0,00</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Controle e Datas -->
                <div class="form-section">
                    <h3 class="section-title">⚙️ Controle e Prazos</h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="status">Status da Ordem</label>
                            <select id="status" name="status">
                                <option value="OPEN">Aberta</option>
                                <option value="DIAGNOSING">Em Diagnóstico</option>
                                <option value="WAITING_APPROVAL">Aguardando Aprovação</option>
                                <option value="APPROVED">Aprovada</option>
                                <option value="WAITING_PARTS">Aguardando Peças</option>
                                <option value="IN_PROGRESS">Em Execução</option>
                                <option value="WAITING_PAYMENT">Aguardando Pagamento</option>
                                <option value="COMPLETED">Concluída</option>
                                <option value="CANCELLED">Cancelada</option>
                            </select>
                            <span id="statusBadge" class="status-badge badge-open">Aberta</span>
                        </div>
                        
                        <div class="form-group">
                            <label for="estimatedDate">Previsão de Entrega</label>
                            <input type="datetime-local" id="estimatedDate" name="estimatedDate">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="vehicleMileage">Quilometragem Atual</label>
                            <input type="number" id="vehicleMileage" name="vehicleMileage" min="0" placeholder="Ex: 50000">
                        </div>
                        
                        <div class="form-group">
                            <label for="assignedToId">Responsável Técnico</label>
                            <select id="assignedToId" name="assignedToId">
                                <option value="">Selecione um técnico...</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Prioridade</label>
                        <div class="priority-options">
                            <div class="priority-option">
                                <input type="radio" id="priority_low" name="priority" value="LOW">
                                <label for="priority_low">Baixa</label>
                            </div>
                            <div class="priority-option">
                                <input type="radio" id="priority_normal" name="priority" value="NORMAL" checked>
                                <label for="priority_normal">Normal</label>
                            </div>
                            <div class="priority-option">
                                <input type="radio" id="priority_high" name="priority" value="HIGH">
                                <label for="priority_high">Alta</label>
                            </div>
                            <div class="priority-option">
                                <input type="radio" id="priority_urgent" name="priority" value="URGENT">
                                <label for="priority_urgent">Urgente</label>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Valores -->
                <div class="form-section">
                    <h3 class="section-title">💰 Valores</h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="laborValue">Valor da Mão de Obra (R$)</label>
                            <input type="number" id="laborValue" name="laborValue" min="0" step="0.01" placeholder="0,00">
                        </div>
                        
                        <div class="form-group">
                            <label for="partsValue">Valor das Peças (R$)</label>
                            <input type="number" id="partsValue" name="partsValue" min="0" step="0.01" placeholder="0,00">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="discount">Desconto (R$)</label>
                            <input type="number" id="discount" name="discount" min="0" step="0.01" placeholder="0,00">
                        </div>
                        
                        <div class="form-group">
                            <label for="totalValue">Valor Total (R$)</label>
                            <input type="number" id="totalValue" name="totalValue" min="0" step="0.01" placeholder="0,00" readonly>
                        </div>
                    </div>
                </div>
                
                <!-- Ações -->
                <div class="form-actions">
                    <a href="/service-orders.html" class="btn btn-secondary">Cancelar</a>
                    <button type="submit" class="btn btn-success" id="submitBtn">💾 Salvar Ordem de Serviço</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        let isEditing = false;
        let serviceOrderId = null;
        let customers = [];
        let users = [];
        
        // Verificar autenticação
        function checkAuth() {
            const user = localStorage.getItem('user');
            if (!user) {
                window.location.href = '/login.html';
                return null;
            }
            return JSON.parse(user);
        }
        
        // Logout
        function logout() {
            localStorage.removeItem('user');
            window.location.href = '/login.html';
        }
        
        // Carregar dados do usuário
        function loadUserInfo() {
            const user = checkAuth();
            if (user) {
                document.getElementById('userName').textContent = `${user.name} (${user.role})`;
            }
        }
        
        // Carregar dados iniciais
        async function loadInitialData() {
            try {
                // Carregar clientes
                const customersResponse = await fetch('/api/customers?limit=1000');
                const customersData = await customersResponse.json();
                
                if (customersData.success) {
                    customers = customersData.data;
                    populateCustomers();
                }
                
                // Carregar usuários (técnicos)
                const usersResponse = await fetch('/api/users');
                const usersData = await usersResponse.json();
                
                if (usersData.success) {
                    users = usersData.data;
                    populateUsers();
                }
            } catch (error) {
                console.error('Erro ao carregar dados iniciais:', error);
                showAlert('Erro ao carregar dados iniciais', 'error');
            }
        }
        
        // Popular dropdown de clientes
        function populateCustomers() {
            const select = document.getElementById('customerId');
            select.innerHTML = '<option value="">Selecione um cliente...</option>';
            
            customers.forEach(customer => {
                const option = document.createElement('option');
                option.value = customer.id;
                option.textContent = `${customer.name} - ${formatCpfCnpj(customer.cpfCnpj)}`;
                select.appendChild(option);
            });
        }
        
        // Popular dropdown de usuários
        function populateUsers() {
            const select = document.getElementById('assignedToId');
            select.innerHTML = '<option value="">Selecione um técnico...</option>';
            
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = `${user.name} (${user.role})`;
                select.appendChild(option);
            });
        }
        
        // Carregar veículos do cliente
        function loadCustomerVehicles(customerId) {
            const vehicleSelect = document.getElementById('vehicleId');
            const infoDiv = document.getElementById('customerVehicleInfo');
            
            if (!customerId) {
                vehicleSelect.innerHTML = '<option value="">Selecione primeiro um cliente...</option>';
                vehicleSelect.disabled = true;
                infoDiv.classList.add('hidden');
                return;
            }
            
            const customer = customers.find(c => c.id === customerId);
            if (!customer) return;
            
            vehicleSelect.innerHTML = '<option value="">Selecione um veículo...</option>';
            vehicleSelect.disabled = false;
            
            if (customer.vehicles && customer.vehicles.length > 0) {
                customer.vehicles.forEach(vehicle => {
                    const option = document.createElement('option');
                    option.value = vehicle.id;
                    option.textContent = `${vehicle.brand} ${vehicle.model} - ${vehicle.plate} (${vehicle.year})`;
                    vehicleSelect.appendChild(option);
                });
            } else {
                vehicleSelect.innerHTML = '<option value="">Nenhum veículo cadastrado</option>';
                vehicleSelect.disabled = true;
            }
            
            // Mostrar informações do cliente
            showCustomerInfo(customer);
        }
        
        // Mostrar informações do cliente e veículo
        function showCustomerInfo(customer, vehicle = null) {
            const infoDiv = document.getElementById('customerVehicleInfo');
            
            let html = `
                <div class="info-row">
                    <div class="info-item">
                        <div class="info-label">Cliente:</div>
                        <div class="info-value">${customer.name}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Documento:</div>
                        <div class="info-value">${formatCpfCnpj(customer.cpfCnpj)}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Telefone:</div>
                        <div class="info-value">${customer.phone || 'Não informado'}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Email:</div>
                        <div class="info-value">${customer.email || 'Não informado'}</div>
                    </div>
                </div>
            `;
            
            if (vehicle) {
                html += `
                    <div class="info-row">
                        <div class="info-item">
                            <div class="info-label">Veículo:</div>
                            <div class="info-value">${vehicle.brand} ${vehicle.model}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Placa:</div>
                            <div class="info-value">${vehicle.plate}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Ano:</div>
                            <div class="info-value">${vehicle.year}${vehicle.modelYear ? `/${vehicle.modelYear}` : ''}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Cor:</div>
                            <div class="info-value">${vehicle.color || 'Não informada'}</div>
                        </div>
                    </div>
                `;
            }
            
            infoDiv.innerHTML = html;
            infoDiv.classList.remove('hidden');
        }
        
        // Atualizar badge de status
        function updateStatusBadge() {
            const statusSelect = document.getElementById('status');
            const badge = document.getElementById('statusBadge');
            const status = statusSelect.value;
            
            const statusLabels = {
                'OPEN': 'Aberta',
                'DIAGNOSING': 'Em Diagnóstico',
                'WAITING_APPROVAL': 'Aguardando Aprovação',
                'APPROVED': 'Aprovada',
                'WAITING_PARTS': 'Aguardando Peças',
                'IN_PROGRESS': 'Em Execução',
                'WAITING_PAYMENT': 'Aguardando Pagamento',
                'COMPLETED': 'Concluída',
                'CANCELLED': 'Cancelada'
            };
            
            badge.textContent = statusLabels[status] || status;
            badge.className = `status-badge badge-${status.toLowerCase().replace('_', '-')}`;
        }
        
        // Calcular valor total
        function calculateTotal() {
            const laborValue = parseFloat(document.getElementById('laborValue').value) || 0;
            const partsValue = parseFloat(document.getElementById('partsValue').value) || 0;
            const discount = parseFloat(document.getElementById('discount').value) || 0;
            
            const total = laborValue + partsValue - discount;
            document.getElementById('totalValue').value = total.toFixed(2);
        }
        
        // Formatar CPF/CNPJ
        function formatCpfCnpj(cpfCnpj) {
            if (!cpfCnpj) return '';
            if (cpfCnpj.length === 11) {
                return cpfCnpj.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
            } else if (cpfCnpj.length === 14) {
                return cpfCnpj.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
            }
            return cpfCnpj;
        }
        
        // Mostrar alerta
        function showAlert(message, type = 'success') {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alert.classList.remove('hidden');
            
            setTimeout(() => {
                alert.classList.add('hidden');
            }, 5000);
        }
        
        // Validar formulário
        function validateForm() {
            clearErrors();
            let isValid = true;
            
            const customerId = document.getElementById('customerId').value;
            const vehicleId = document.getElementById('vehicleId').value;
            
            if (!customerId) {
                showError('customerIdError', 'Cliente é obrigatório');
                isValid = false;
            }
            
            if (!vehicleId) {
                showError('vehicleIdError', 'Veículo é obrigatório');
                isValid = false;
            }
            
            return isValid;
        }
        
        function showError(elementId, message) {
            document.getElementById(elementId).textContent = message;
        }
        
        function clearErrors() {
            const errorElements = document.querySelectorAll('.error');
            errorElements.forEach(el => el.textContent = '');
        }
        
        // Event listeners
        document.getElementById('customerId').addEventListener('change', function(e) {
            loadCustomerVehicles(e.target.value);
        });
        
        document.getElementById('vehicleId').addEventListener('change', function(e) {
            const customerId = document.getElementById('customerId').value;
            const vehicleId = e.target.value;
            
            if (customerId && vehicleId) {
                const customer = customers.find(c => c.id === customerId);
                const vehicle = customer?.vehicles?.find(v => v.id === vehicleId);
                
                if (customer && vehicle) {
                    showCustomerInfo(customer, vehicle);
                }
            }
        });
        
        document.getElementById('status').addEventListener('change', updateStatusBadge);
        
        // Calcular total quando valores mudarem
        ['laborValue', 'partsValue', 'discount'].forEach(id => {
            document.getElementById(id).addEventListener('input', calculateTotal);
        });
        
        // Submeter formulário
        document.getElementById('serviceOrderForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!validateForm()) {
                return;
            }
            
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '⏳ Salvando...';
            submitBtn.disabled = true;
            
            try {
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());

                // Processar peças
                const parts = [];
                const partItems = document.querySelectorAll('.part-item');

                partItems.forEach(item => {
                    const partId = item.id.split('-')[1];
                    const partIdValue = document.getElementById(`partId-${partId}`).value;
                    const quantity = parseFloat(document.getElementById(`quantity-${partId}`).value) || 0;
                    const unitPrice = parseFloat(document.getElementById(`unitPrice-${partId}`).value) || 0;

                    if (partIdValue && quantity > 0) {
                        parts.push({
                            partId: partIdValue,
                            quantity: quantity,
                            unitPrice: unitPrice
                        });
                    }
                });

                // Adicionar peças aos dados
                data.parts = parts;

                // Remover campos de peças do FormData (não são mais necessários)
                Object.keys(data).forEach(key => {
                    if (key.startsWith('parts[')) {
                        delete data[key];
                    }
                });

                // Limpar campos vazios
                Object.keys(data).forEach(key => {
                    if (data[key] === '') {
                        data[key] = null;
                    }
                });

                const url = isEditing ? `/api/service-orders/${serviceOrderId}` : '/api/service-orders';
                const method = isEditing ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert(result.message || 'Ordem de serviço salva com sucesso!');
                    setTimeout(() => {
                        window.location.href = '/service-orders.html';
                    }, 2000);
                } else {
                    showAlert('Erro: ' + result.error, 'error');
                }
            } catch (error) {
                showAlert('Erro de conexão: ' + error.message, 'error');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });
        
        // Carregar ordem de serviço para edição
        async function loadServiceOrder(id) {
            try {
                const response = await fetch(`/api/service-orders/${id}`);
                const data = await response.json();

                if (data.success) {
                    const order = data.data;

                    // Preencher campos básicos
                    document.getElementById('customerId').value = order.customerId;
                    document.getElementById('vehicleId').value = order.vehicleId;
                    document.getElementById('customerComplaint').value = order.customerComplaint || '';
                    document.getElementById('symptoms').value = order.symptoms || '';
                    document.getElementById('diagnosis').value = order.diagnosis || '';
                    document.getElementById('solution').value = order.solution || '';
                    document.getElementById('observations').value = order.observations || '';
                    document.getElementById('status').value = order.status;
                    document.getElementById('priority').value = order.priority;
                    document.getElementById('vehicleMileage').value = order.vehicleMileage || '';
                    document.getElementById('assignedToId').value = order.assignedToId || '';
                    document.getElementById('laborValue').value = order.laborValue || '';
                    document.getElementById('partsValue').value = order.partsValue || '';
                    document.getElementById('discount').value = order.discount || '';
                    document.getElementById('totalValue').value = order.totalValue || '';

                    // Definir prioridade
                    document.querySelector(`input[name="priority"][value="${order.priority}"]`).checked = true;

                    // Data estimada
                    if (order.estimatedDate) {
                        const date = new Date(order.estimatedDate);
                        const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
                        document.getElementById('estimatedDate').value = localDate.toISOString().slice(0, 16);
                    }

                    // Carregar veículos do cliente e mostrar informações
                    loadCustomerVehicles(order.customerId);
                    setTimeout(() => {
                        document.getElementById('vehicleId').value = order.vehicleId;
                        const customer = customers.find(c => c.id === order.customerId);
                        const vehicle = customer?.vehicles?.find(v => v.id === order.vehicleId);
                        if (customer && vehicle) {
                            showCustomerInfo(customer, vehicle);
                        }
                    }, 500);

                    // Atualizar interface
                    document.getElementById('pageTitle').textContent = '✏️ Editar Ordem de Serviço';
                    document.getElementById('submitBtn').innerHTML = '💾 Atualizar Ordem de Serviço';
                    document.getElementById('orderNumber').textContent = order.number;
                    document.getElementById('orderNumber').classList.remove('hidden');

                    updateStatusBadge();

                } else {
                    showAlert('Erro ao carregar ordem de serviço: ' + data.error, 'error');
                }
            } catch (error) {
                showAlert('Erro de conexão: ' + error.message, 'error');
            }
        }

        // Inicializar
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            loadUserInfo();
            loadInitialData();
            updateStatusBadge();

            // Verificar se é edição
            const urlParams = new URLSearchParams(window.location.search);
            serviceOrderId = urlParams.get('id');
            if (serviceOrderId) {
                isEditing = true;
                // Aguardar carregamento dos dados iniciais antes de carregar a OS
                setTimeout(() => {
                    loadServiceOrder(serviceOrderId);
                }, 1000);
            }
        });

        // Gerenciamento de Peças
        let partCounter = 0;
        let availableParts = [];

        // Carregar peças disponíveis
        async function loadAvailableParts() {
            try {
                const response = await fetch('/api/parts?limit=100');
                const data = await response.json();
                if (data.success) {
                    availableParts = data.data;
                }
            } catch (error) {
                console.error('Erro ao carregar peças:', error);
            }
        }

        // Adicionar nova peça
        function addPart() {
            partCounter++;
            const partItem = document.createElement('div');
            partItem.className = 'part-item';
            partItem.id = `part-${partCounter}`;

            partItem.innerHTML = `
                <div class="part-select">
                    <input type="text" class="part-search" placeholder="Buscar peça..."
                           onkeyup="searchParts(this, ${partCounter})"
                           onfocus="showSuggestions(${partCounter})"
                           onblur="hideSuggestions(${partCounter})">
                    <div class="part-suggestions" id="suggestions-${partCounter}"></div>
                    <input type="hidden" name="parts[${partCounter}][partId]" id="partId-${partCounter}">
                    <input type="hidden" name="parts[${partCounter}][partName]" id="partName-${partCounter}">
                </div>
                <div class="part-quantity">
                    <input type="number" min="1" value="1"
                           name="parts[${partCounter}][quantity]"
                           id="quantity-${partCounter}"
                           onchange="updatePartTotal(${partCounter})">
                    <div class="stock-warning" id="stock-warning-${partCounter}" style="display: none;"></div>
                </div>
                <div class="part-price">
                    <input type="number" step="0.01" min="0"
                           name="parts[${partCounter}][unitPrice]"
                           id="unitPrice-${partCounter}"
                           onchange="updatePartTotal(${partCounter})"
                           placeholder="0,00">
                </div>
                <div class="part-total">
                    <div class="part-total-value" id="total-${partCounter}">R$ 0,00</div>
                </div>
                <div>
                    <button type="button" class="remove-part" onclick="removePart(${partCounter})">🗑️</button>
                </div>
            `;

            document.getElementById('partsList').appendChild(partItem);
            updatePartsTotal();
        }

        // Buscar peças
        function searchParts(input, partId) {
            const query = input.value.toLowerCase();
            const suggestions = document.getElementById(`suggestions-${partId}`);

            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }

            const filtered = availableParts.filter(part =>
                part.name.toLowerCase().includes(query) ||
                (part.internalCode && part.internalCode.toLowerCase().includes(query)) ||
                (part.brand && part.brand.toLowerCase().includes(query))
            );

            if (filtered.length > 0) {
                suggestions.innerHTML = filtered.map(part => `
                    <div class="part-suggestion" onclick="selectPart(${partId}, '${part.id}', '${part.name.replace(/'/g, "\\'")}', ${part.salePrice || part.price || 0}, ${part.stock || 0})">
                        <div class="suggestion-name">${part.name}</div>
                        <div class="suggestion-details">
                            ${part.internalCode ? `Código: ${part.internalCode} | ` : ''}
                            ${part.brand ? `${part.brand} | ` : ''}
                            Estoque: ${part.stock || 0} |
                            Preço: ${formatCurrency(part.salePrice || part.price || 0)}
                        </div>
                    </div>
                `).join('');
                suggestions.style.display = 'block';
            } else {
                suggestions.style.display = 'none';
            }
        }

        // Selecionar peça
        function selectPart(partId, id, name, price, stock) {
            document.getElementById(`partId-${partId}`).value = id;
            document.getElementById(`partName-${partId}`).value = name;
            document.querySelector(`#part-${partId} .part-search`).value = name;
            document.getElementById(`unitPrice-${partId}`).value = price;
            document.getElementById(`suggestions-${partId}`).style.display = 'none';

            // Verificar estoque
            const quantityInput = document.getElementById(`quantity-${partId}`);
            const stockWarning = document.getElementById(`stock-warning-${partId}`);

            if (stock <= 0) {
                stockWarning.textContent = 'Sem estoque disponível!';
                stockWarning.style.display = 'block';
                quantityInput.max = 0;
            } else if (stock < 5) {
                stockWarning.textContent = `Apenas ${stock} unidades em estoque`;
                stockWarning.style.display = 'block';
                quantityInput.max = stock;
            } else {
                stockWarning.style.display = 'none';
                quantityInput.max = stock;
            }

            updatePartTotal(partId);
        }

        // Atualizar total da peça
        function updatePartTotal(partId) {
            const quantity = parseFloat(document.getElementById(`quantity-${partId}`).value) || 0;
            const unitPrice = parseFloat(document.getElementById(`unitPrice-${partId}`).value) || 0;
            const total = quantity * unitPrice;

            document.getElementById(`total-${partId}`).textContent = formatCurrency(total);
            updatePartsTotal();
        }

        // Atualizar total geral das peças
        function updatePartsTotal() {
            let total = 0;
            const partItems = document.querySelectorAll('.part-item');

            partItems.forEach(item => {
                const partId = item.id.split('-')[1];
                const quantity = parseFloat(document.getElementById(`quantity-${partId}`).value) || 0;
                const unitPrice = parseFloat(document.getElementById(`unitPrice-${partId}`).value) || 0;
                total += quantity * unitPrice;
            });

            document.getElementById('partsTotal').textContent = formatCurrency(total);
        }

        // Remover peça
        function removePart(partId) {
            const partItem = document.getElementById(`part-${partId}`);
            if (partItem) {
                partItem.remove();
                updatePartsTotal();
            }
        }

        // Mostrar sugestões
        function showSuggestions(partId) {
            const input = document.querySelector(`#part-${partId} .part-search`);
            if (input.value.length >= 2) {
                searchParts(input, partId);
            }
        }

        // Esconder sugestões (com delay para permitir clique)
        function hideSuggestions(partId) {
            setTimeout(() => {
                document.getElementById(`suggestions-${partId}`).style.display = 'none';
            }, 200);
        }

        // Formatar moeda
        function formatCurrency(value) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(value || 0);
        }

        // Carregar peças ao inicializar
        loadAvailableParts();
    </script>
    <script src="/js/logo-manager.js"></script>
    <script src="/js/global-menu.js"></script>
    <script src="/simple-menu-fix.js"></script>
    <script src="/force-menu-size.js"></script>
    <script src="/debug-menu-styles.js"></script>
</body>
</html>
